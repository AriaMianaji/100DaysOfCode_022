# -*- coding: utf-8 -*-
"""day 022 of 100 #2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dSR3q_v8M3ilhDdX4By_L_72oE41xnCA
"""

!pip install ColabTurtlePlus

from ColabTurtlePlus.Turtle import Turtle

class Paddle(Turtle):

  def __init__(self, pos):
    super().__init__()
    self.shape('square')
    self.shapesize(5, 1)
    self.color('white')
    self.penup()
    self.goto(pos)

  def go_up(self):
    new_y = self.ycor() + 20
    self.goto(self.xcor(), new_y)

  def go_down(self):
    new_y = self.ycor() - 20
    self.goto(self.xcor(), new_y)

from ColabTurtlePlus.Turtle import Turtle

class Ball(Turtle):

  def __init__(self):
    super().__init__()
    self.shape('circle')
    self.shapesize(1, 1)
    self.color('white')
    self.penup()
    self.x_move = 5
    self.y_move = 5

  def move(self):
    new_y = self.ycor() + self.y_move
    new_x = self.xcor() + self.x_move
    self.goto(new_x, new_y)

  def y_bounce(self):
    self.y_move *= -1

  def x_bounce(self):
    self.x_move *= -1

  def reset(self):
    self.goto(0, 0)
    self.x_bounce()

from ColabTurtlePlus.Turtle import Turtle

ALIGNMENT = 'center'
FONT = ('Courier', 80, 'normal')

class Scoreboard:

  def __init__(self):
    super().__init__()
    self.color('white')
    self.l_score = 0
    self.r_score = 0
    self.puenup()
    self.hideturtle()
    self.update_score()

  def update_score(self):
    self.clear()
    self.goto(-100, 200)
    self.write(self.l_score, align= ALIGNMENT, font= FONT)
    self.goto(100, 200)
    self.write(self.r_score, align= ALIGNMENT, font= FONT)

  def l_point(self):
    self.l_score += 1
    self.update_score()

  def r_point(self):
    self.r_score += 1
    self.update_score()

from ColabTurtlePlus.Turtle import *

screen = Screen()
# screen.clearscreen()
screen.setup(800, 600)
screen.bgcolor('black')

l_paddle = Paddle((-350, 0))
r_paddle = Paddle((350, 0))

ball = Ball()

scoreboard = Scoreboard()

game_is_on = True

print(l_paddle.distance(r_paddle.position()))

while game_is_on:

  user_input = input().lower()

  ball.move()

  if ball.ycor() > 280 or ball.ycor() < -280:
    ball.y_bounce()

  if ball.xcor() > 330 and ball.distance(r_paddle.position()) < 50 or ball.xcor() < -330 and ball.distance(l_paddle.position()) < 50:
    ball.x_bounce()

  if ball.xcor() > 400:
    ball.reset()
    scoreboard.l_point()

  if ball.xcor() < -400:
    ball.reset()
    scoreboard.r_point()

  if user_input == 'w':
     l_paddle.go_up()
  elif user_input == 's':
     l_paddle.go_down()
  elif user_input == 'p':
     r_paddle.go_up()
  elif user_input == 'l':
     r_paddle.go_down()
  elif user_input == 'off':
     break